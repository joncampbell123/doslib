
static int c;
static long int d;
static long double ldoubleme;
static int *ic;
static float *fi;
static int (x);
static long ((y));
static int* ((z));
static int* ((*zz));
static const int * const volatile ((* const zzz));
static near int x1;
static far int x2;
static huge int x3;
static restrict int x4;
static constexpr int x5 = 5;
static int c0,d0;
static long int c1,*d1;
static long int *c2,**d2,e2,f2,g2,h2,i2;
static int c6 = 4;
static int cc = 4,ddd = 6,ee = 12.34,ff = cc;
static const char *sss = "Hello world";
static int c8 = 6;;;
static int d0a = -4;
static int d1a = 4 ? 2 : 1;
static int d2a = 4 ? 3 ? 2 : 1 : 0;
static int d3a = 4 ? 3,2 : 1;
static int d4a = 8 ? 7,6,5,4,3,2 : 1;
static int d4ab= 8 ? "hello world",2 : 1;
static int d4ac= 8 ? 2,"hello world" : 1;
static int d5a = 7 || 3;
static int d5ab= 0 || 3;
static int d5ac= 0 || 0;
static int d5ad= 3 || 0;
static int d5ae=-1 || 0;
static int d6a = 1 || 2 || 3;
static int d7a = 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10;
static int d7ab= 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0;
static int d8a = 1 || 2 || 3 ? 4 || 5 : 6 || 7;
static int d9a = 1 && 2;
static int da = 1 && 2 && 3 && 4 && 5 && 6 && 7 && 8 && 9;
static int db = 1 && 2 || 3 && 4;
static int dc = 1|2;
static int dd = 1|2|3|4|5|6|7|8;
static int de = 1|2 && 3|4 || 5|6;
static int df = 1^2;
static int dg = 1^2^3^4^5^6;
static int dh = 1^2|3^4;
static int di = 1&2;
static int dj = 1&2&3&4&5&6&7&8;
static int dk = 1&2^3&4|5&6;
static int dl = 1 == 2;
static int dm = 1 != 2;
static int dn = 1 == 2 == 3;
static int doo = 1|2 == 3 && 4^5|6 != 7;
static int dp = 1 < 2;
static int dq = 1 > 2;
static int dr = 1 <= 2;
static int ds = 1 >= 2;
static int dt = 1 < 2 < 3 < 4 < 5;
static int du = 1 < 2 > 3 <= 4 >= 5;
static int dv = 1 << 1;
static int dw = 1 >> 1;
static int dx = 1 << 2|3;
static int dy = 1 << 2 << 3 << 4 << 5 << 6;
static int dz = 1 >> 2 >> 3 >> 4 >> 5 >> 6;
static int daa = 1 << 2 >> 3 << 4 >> 5;
static int dab = 1 + 2;
static int dac = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;
static int dad = 1 - 2;
static int dae = 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10;
static int daf = 1 + 2 - 3 + 4 - 5 + 6 - 7 + 8 - 9 + 10;
static int dag = 1 * 2;
static int dah = 1 * 2 * 3 * 4;
static int dai = 100 / 2;
static int daj = 10000 / 2 / 3 / 4;
static int div0a = 123 / 0; /* do not reduce this! */
static int div0b = 4 * ((123*5 + 5) / 0);
static int daj2=((4 * 4) / 2) + 5;
static int dak = 1 % 2;
static int dal = 1 % 2 % 3 % 4;
static int dam = 4 * 4 / 3 % 4;
static int dan = ++a;
static int dao = --a;
static int dap = ++ ++a;
static int daq = -- --a;
static int dar = &a;
static int das = &&a;
static int dat = *a;
static int dau = **a;
static int dav = +a;
static int daw = -a;
static int dax = ~a;
static int day = ~~a;
static int daz = !a;
static int dba = !!a;
static int dbb = sizeof a;
static int dbc = sizeof ~a;
static int dbd = sizeof(a);
static int dbe = sizeof(~a);
static int dbf = a++;
static int dbg = a++ ++;
static int dbh = a--;
static int dbi = a-- --;
static int dbj = a.x;
static int dbk = a.x.y.z;
static int dbl = a->x;
static int dbm = a->x->y->z;
static int dbn = (a);
static int dbo = (b*a)*c;
static int dbp = (b+a)*c;
static int dbq = b+a*c;
static int dbr = (((a+b)*c)/d)+(e*f);
static int dbs = a[5];
static int dbt = a[b+c];
static int dbu = a[3][5];
static int dbv = a[b+c][4+d];
static int dbw = (*(a+3))[b][c][d][e][f];
static int ddda[4];
static int dbz[4][5][6][a];
static int dca[a+b*c][d+e][((f+g)*h)+5][g];
static int dcb[];
static int dcc[][][][];
static int dcd();
static int dce(int x);
static int dcf(int x,float y);
static int dcg(int x,float y,int z,char *a,const char *b,const char * const c);
static int dch(int a,int b,...);
static int dci(int x=5,int y=x*3);
static int dcj(a,b) int a; int b; { }
static int dck(a,b,c,d,e,f,g,h,i,j,k) int a,b,c; float d,e,f; double g,h; const char *i,*j,*k; { }
static int dcl(a,b,c,...) int a; float b; const char c; { }
static int dcm(int (*a),int (*b)(int c));
static int dcn(int a,int b),e(int f,int g);
static int dco() { }
static int e0(int a) { }
static int xaaa = y = 5;
static int xaab = (y=5);
static int xaac = (y*=6);
static int xaad = (y/=6);
static int xaae = (y%=6);
static int xaaf = (y+=3);
static int xaag = (y-=3);
static int xaah = (y<<=2);
static int xaai = (y>>=2);
static int xaaj = (y&=3);
static int xaak = (y^=3);
static int xaal = (y|=3);
extern int xaea;
extern int xaea;
int xaea;
static int daaa(int a,int b) {
	int c = 3,x = 3;
	long d = 5 + a*b+c+x,dd = d*d;
	float fa = 3.3,fb = fa*3,fc = fa*3+fb,fd = 4.44;
	double fda = 2.22,fdb = 1.11,fdc = 33.33,fdd = 44.44;
	const char *px,**py,* const * const pz;
	char arr[5],arb[11];
	int* (*func)(int x,int y,float z);
	int* (* const *func1)(const int x,int z,int* (*xyz)(int a,int b),float** (* const abcd)(float z),char a[5][b+c],int xx=3,...);
	int (*func2)(int a=4,int b=2,int c=a+b,...);
	int some_external_function(int x);

	xaea = 4;
	c = x + 4; c = (x)+(d/fa)*fb; c |= 3;
	x |= c + x;

	{
		int yo_dawg = 5;
		yo_dawg += x;
	}

	x |= 3;

	{
		int nest = 5;
		nest++;
		{
			int nest2 = nest + 1;
			nest2++; nest2*=3;
			{
				int nest3 = nest2 + 1;
				nest3/=2;
			}
		}
	}

	label1: x |= 3;
	label2: label3: x -= 4;

	if (1) x += 3;
	if (x == 2 || c == (d/4)) x += 5;
	if (c == d) { x += 2; c /= 4+d; }
	if (c == d) x += 3; else x -= 3;
	if (c == d || fa == fb) { x += 3; d /= 4; } else { x -= 3; d *= 7; }

	if (c == 2)
		x += 3;
	else if (c == 3)
		x += 5;
	else if (c == 4)
		x += 6;
	else
		x += 7;

	switch (c) {
		case 3: x += 4; break;;;;;
		case 7: x += 3; goto label1;
		default: x += 2; break;
	}

	return;
	return 3;
	return (3+x)*y;
}
int some_external_function(int x);
static int dddb(int a) {
	int x = 1,y = 0,z = 0;
	while (a-- > 0) x += x;
	while (a-- > 0) { x += x; }
	do { x += x; } while (a-- > 0);
	do x += x; while (a-- > 0);
	for (x=0;x < 5;x++) y = (y*2)+1;
	for (x=0;x < 5;) { y = (y*2)+1; z++; }
	for (x=0;x < 5;);
	for (x=0;;);
	for (;;);
	for (;;) z++;
	for (x=0;x < 5;x++,z++) z++;
	return x;
}
static int (*dddb_p)(int a) = dddb;
static int doody(int,int,int a = 5,char*,const char * const,int[],int[5],int[3][5]) {
	roundto();
	(*funcptr)();
	func1()();
	func1()()()()();
	func1()[5]();
	roundto(a,10);
	printf("Hello world %s\n","dude",4,2,2*3,((a*5)+3)/2);
	(*funcptr)(&a,a+5);
	return 5;
}
static int x1a1a = sizeof(int);
static int x1a1b = sizeof(int*);
static int x1a1c = sizeof(const int* const*);
static int x1a1d = sizeof(int[3]);
static int x1a1e = sizeof(int[3][3]);
static int x1a1f = sizeof(int*[3][3]);
static int x1a1g = sizeof(const int);
static int x1a1h[] = { 1 };
static int x1a1i[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
static int x1a1j[] = { a, b, c+d, e*f, g*h+i };
static int x1a1k[] = { a, b, { 1, 2, 3, 4 }, c, d };
static int x1a1l[] = { a, b, { 1, 2, 3, 4, { x*x, y*y, z*z } }, c, d };
static int daaba(int a) {
	return (long)(a);
}
static int daabb(char a,char b) {
	return (long)(int)(a+b);
}
enum test { A, B, C, D } xoooo2;
enum test xoooo;
enum test2 { AA=1, AB, AC=100, AD=AA*400, AD2, AD3, AE=AA+AB+AC+AD, AF=1?AC:AB, AG=0?AC:AB, AH=1?1?AD:AC:AB } xoooo3;
enum { BA, BB, BC, BD } xoooo4;
struct test_declare;
struct test;
union test;
struct test { } xxxxxxx;
struct test xooo5,*xxxxy,**xxxxxz;
struct test2 { int a; int b,c; float d[3]; int x:1,y:3,z:7; } xooo6;
struct test3 { int a; struct another { int x,y,z; } one; } xooo7;
struct { int a,b,c; int z; } xooo8;
union utest_declr;
union utest xooo9;
union utest { } xooo10;
union utest2 { int a; int b,c; float d[3]; int x:1,y:3,z:7; } xooo11;
union { int a,b,c; int z; } xooo12;
struct test4 { int x; union { struct { int x,y; } i; struct { float a,b; } f; } un; } t;
struct test5 {
	int a;
	int (*func1)(int a,int b);
} x00012;
enum test;
enum test3 {
	CA,
	CB,
	CC,
	CD,
	CE
};
void enumcall1(enum test);
void enumcall2(enum test2);
void enumcall3(enum test3);
struct test6;
struct test6 {
	int a;
	int (*funct1)(int a,int b);
};
union utest3 {
	int a,b;
};
struct {
	int a,b;
};
union {
	int a,b;
};
static const char *x00013 = "hello\xff";
static const char *x00014 = "Hello really long string constant likely to cause reallocation as it parses it into memory blah blah blah blah blah blah\n";
static const short *x00015a = u"Hello world\n";
static const long *x00015b = U"Hello world\n";
struct test7 { int a, b, c; } x00015 = { 1, 2, 3 };
struct test8 { int a[3], b[5], c[7]; } x00016 = { {1,2,3}, {1,2,3,4,5}, {1,2,3,4,5,6,7} };
static int x00017[] = { 10, 20, [5] = 50, [50][5] = 500, [500][50][5] = 5000, 60, 70 };
struct test9 { int a, test, b; } x00018 = { .a = 5, .b = 7*8, .test = ((23*5)/3)+2 };
struct test10 { int a, test, b; } x00019 = { a: 5, b: 7*8, c: a*b };
static inline int d00020() { return 3; }
static constexpr inline int d00021() { return 4; }

#define X(x) static int d000022(int y) { return y*x; }
X(1);

static int d000023(int x) {
	static const int s = 50;
	switch (x) {
		case 0:
			return 0;
		case 1 ... 3:
			return 1;
		case 4 ... 19:
			return 2;
		case 20 ... s:
			return 3;
		default:
			break;
	};

	return x;
}

int forward_declaration_1(int a,int b);
int forward_declaration_1(int a,int b);

static int x00024[] = { 2, 3, [5] = 4, [10 ... 19] = 5 };

static int tt2af = 6;
struct tt2a {
	int	tt2af,x,y,z;
	int	a,b,c;
	int*	(* const funcptr)(int x,int y);
};

struct tt2 {
	unsigned int	x:4;
	unsigned int	y:3;
	unsigned int	z:1;
	unsigned int	a:3;
	unsigned int	b:2;
	unsigned int	h:1,i:1,j:1;
};

struct tt2 tt2va;

struct tt2b {
	unsigned int	x:4;
	unsigned int	y:3;
	unsigned int	z:1;
	unsigned int	a:3;
	unsigned int	b:2;
	unsigned int	h:1,i:1,j:1;
} tt2vb;

struct tt2b2 {
	unsigned int	cx:CB;
	unsigned int	cy:CC;
	unsigned int	cz:CD;
	unsigned int	ca:CE;
} tt2vb2;

/* This is our extension to the struct bitfield syntax that allows explicit bitfield length and starting bit.
   For consistency reasons, the syntax within the brackets are exactly the same as GCC's range syntax for case statements and designated init lists.
   The syntax is [LSB bit position ... MSB bit position]. [4 ... 7] for example declares a 4-bit field starting at bit 4 with the MSB at bit 7. */
struct tt3 {
	unsigned int	x:[0 ... 3];
	unsigned int	y:[4 ... 6];
	unsigned int	z:[7];
	unsigned int	a:[8 ... 10];
	unsigned int	b:[11 ... 12];
	unsigned int	h:[13],i:[14],j:[15];
};

#define BF(x) [((x)*5) ... (((x)*5)+4)]

struct tt4 {
	unsigned int	x:BF(0);
	unsigned int	y:BF(1);
	unsigned int	z:BF(2);
	unsigned int	a:BF(3);
	unsigned int	b:BF(4);
};

struct tt4b2 {
	unsigned int	cx:[CA ... CB];
	unsigned int	cy:[CB ... CC];
	unsigned int	cz:[CC ... CD];
	unsigned int	ca:[CD ... CE];
} tt4vb2;

typedef unsigned int tdu1;
typedef struct tdu2_t { int a; int b; } tdu2;

enum :char {
	DA,
	DB,
	DC,
	DD,
	DE
} xe1;

enum test4:char {
	EA,
	EB,
	EC,
	ED,
	EE
} xe2;

enum test5:unsigned char {
	FA,
	FB,
	FC,
	FD,
	FE
} xe3;

static int funk1(funcytown) int (*funcytown)(int (*fu1)(int (*fu2)(int))); { }
static int funk2(funcytown) int (*funcytown)(int* (*fu1)(int* (*fu2)(int))); { }
static int funk3(funcytown) int (*funcytown)(int* (*)(int* (*)(int))); { }
static int funk4(funcytown) int (*funcytown)(int* (*fu1[])(int* (*fu2[])(int))); { }
static int funk5(funcytown) int (*funcytown)(int* (*fu1[5])(int* (*fu2[5])(int))); { }
static int funk6(funcytown) int (*funcytown)(int* (*fu1[5][5])(int* (*fu2[5][5])(int))); { }
static int (*funy1a[])();
static int (*funy1b[5])();
static int (*funy1c[5][3])();
static int (*funy1d[5][3])(int* (*f1)(int* c[]));
static int (*funy1e[5][3])(int* (*)(int* []));
static int (*funy1f[5][3])(int* (*)(int* [10]));

int forward_declaration_1(int a,int b) {
	return a+b;
}

int fwd1(int a,int b);

int fwd1(int a,int b) {
	return a+b;
}

int fwd1(int a,int b);

enum negatives { NA, NB, NC, ND=-5, NE, NF, NG, NH=-10000, NI };

const int constA = 5;
const int constB = 5 * 5 + 3;
constexpr int constC = constA*constB;
const int constD = constA + constB + constC;

static int fromConst1[constD];

