
static int c;
static long int d;
static long double ldoubleme;
static int *ic;
static float *fi;
static int (x);
static long ((y));
static int* ((z));
static int* ((*zz));
static const int * const volatile ((* const zz));
static near int x;
static far int x;
static huge int x;
static restrict int x;
static constexpr int x = 5;
static int c,d;
static long int c,*d;
static long int *c,**d,e,f,g,h,i;
static int c = 4;
static int cc = 4,d = 6,ee = 12.34,ff = cc;
static const char *s = "Hello world";
static int c = 6;;;
static int d = 4 ? 2 : 1;
static int d = 4 ? 3 ? 2 : 1 : 0;
static int d = 4 ? 3,2 : 1;
static int d = 8 ? 7,6,5,4,3,2 : 1;
static int d = 7 || 3;
static int d = 1 || 2 || 3;
static int d = 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10;
static int d = 1 || 2 || 3 ? 4 || 5 : 6 || 7;
static int d = 1 && 2;
static int d = 1 && 2 && 3 && 4 && 5 && 6 && 7 && 8 && 9;
static int d = 1 && 2 || 3 && 4;
static int d = 1|2;
static int d = 1|2|3|4|5|6|7|8;
static int d = 1|2 && 3|4 || 5|6;
static int d = 1^2;
static int d = 1^2^3^4^5^6;
static int d = 1^2|3^4;
static int d = 1&2;
static int d = 1&2&3&4&5&6&7&8;
static int d = 1&2^3&4|5&6;
static int d = 1 == 2;
static int d = 1 != 2;
static int d = 1 == 2 == 3;
static int d = 1|2 == 3 && 4^5|6 != 7;
static int d = 1 < 2;
static int d = 1 > 2;
static int d = 1 <= 2;
static int d = 1 >= 2;
static int d = 1 < 2 < 3 < 4 < 5;
static int d = 1 < 2 > 3 <= 4 >= 5;
static int d = 1 << 1;
static int d = 1 >> 1;
static int d = 1 << 2|3;
static int d = 1 << 2 << 3 << 4 << 5 << 6;
static int d = 1 >> 2 >> 3 >> 4 >> 5 >> 6;
static int d = 1 << 2 >> 3 << 4 >> 5;
static int d = 1 + 2;
static int d = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;
static int d = 1 - 2;
static int d = 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10;
static int d = 1 + 2 - 3 + 4 - 5 + 6 - 7 + 8 - 9 + 10;
static int d = 1 * 2;
static int d = 1 * 2 * 3 * 4;
static int d = 1 / 2;
static int d = 1 / 2 / 3 / 4;
static int d = 1 % 2;
static int d = 1 % 2 % 3 % 4;
static int d = 1 * 2 / 3 % 4;
static int d = ++a;
static int d = --a;
static int d = ++ ++a;
static int d = -- --a;
static int d = &a;
static int d = &&a;
static int d = *a;
static int d = **a;
static int d = +a;
static int d = -a;
static int d = ~a;
static int d = ~~a;
static int d = !a;
static int d = !!a;
static int d = sizeof a;
static int d = sizeof ~a;
static int d = sizeof(a);
static int d = sizeof(~a);
static int d = a++;
static int d = a++ ++;
static int d = a--;
static int d = a-- --;
static int d = a.x;
static int d = a.x.y.z;
static int d = a->x;
static int d = a->x->y->z;
static int d = (a);
static int d = (b*a)*c;
static int d = (b+a)*c;
static int d = b+a*c;
static int d = (((a+b)*c)/d)+(e*f);
static int d = a[5];
static int d = a[b+c];
static int d = a[3][5];
static int d = a[b+c][4+d];
static int d = (*(a+3))[b][c][d][e][f];
static int d[4];
static int d[4][5][6][a];
static int d[a+b*c][d+e][((f+g)*h)+5][g];
static int d[];
static int d[][][][];
static int d();
static int d(int x);
static int d(int x,float y);
static int d(int x,float y,int z,char *a,const char *b,const char * const c);
static int d(int a,int b,...);
static int d(int x=5,int y=x*3);
static int d(a,b) int a; int b; { }
static int d(a,b,c,d,e,f,g,h,i,j,k) int a,b,c; float d,e,f; double g,h; const char *i,*j,*k; { }
static int d(a,b,c,...) int a; float b; const char c; { }
static int d(int (*a),int (*b)(int c));
static int d(int a,int b),e(int f,int g);
static int d() { }
static int e(int a) { }
static int x = y = 5;
static int x = (y=5);
static int x = (y*=6);
static int x = (y/=6);
static int x = (y%=6);
static int x = (y+=3);
static int x = (y-=3);
static int x = (y<<=2);
static int x = (y>>=2);
static int x = (y&=3);
static int x = (y^=3);
static int x = (y|=3);
static int d(int a,int b) {
	int c = 3,x = 3;
	long d = 5 + a*b+c+x,dd = d*d;
	float fa = 3.3,fb = fa*3,fc = fa*3+fb,fd = 4.44;
	double da = 2.22,db = 1.11,dc = 33.33,dd = 44.44;
	const char *x,**y,* const * const z;
	char arr[5],arb[11];
	int* (*func)(int x,int y,float z);
	int* (* const *func1)(const int x,int z,int* (*xyz)(int a,int b),float** (* const abcd)(float z),char a[5][b+c],int xx=3,...);
	int (*func2)(int a=4,int b=2,int c=a+b,...);

	c = x + 4; c = (x)+(d/fa)*fb; c |= 3;
	x |= c + x;

	{
		int yo_dawg = 5;
		yo_dawg += x;
	}

	x |= 3;

	{
		int nest = 5;
		nest++;
		{
			int nest2 = nest + 1;
			nest2++; nest2*=3;
			{
				int nest3 = nest2 + 1;
				nest3/=2;
			}
		}
	}

	label1: x |= 3;
	label2: label3: x -= 4;

	if (1) x += 3;
	if (x == 2 || c == (d/4)) x += 5;
	if (c == d) { x += 2; c /= 4+d; }
	if (c == d) x += 3; else x -= 3;
	if (c == d || fa == fb) { x += 3; d /= 4; } else { x -= 3; d *= 7; }

	if (c == 2)
		x += 3;
	else if (c == 3)
		x += 5;
	else if (c == 4)
		x += 6;
	else
		x += 7;

	switch (c) {
		case 3: x += 4; break;;;;;
		case 7: x += 3; goto label1;
		default: x += 2; break;
	}

	return;
	return 3;
	return (3+x)*y;
}
static int d(int a) {
	int x = 1,y = 0,z = 0;
	while (a-- > 0) x += x;
	while (a-- > 0) { x += x; }
	do { x += x; } while (a-- > 0);
	do x += x; while (a-- > 0);
	for (x=0;x < 5;x++) y = (y*2)+1;
	for (x=0;x < 5;) { y = (y*2)+1; z++; }
	for (x=0;x < 5;);
	for (x=0;;);
	for (;;);
	for (;;) z++;
	for (x=0;x < 5;x++,z++) z++;
	return x;
}
static int d(int,int,int a = 5,char*,const char * const,int[],int[5],int[3][5]) {
	roundto();
	(*funcptr)();
	func1()();
	func1()()()()();
	func1()[5]();
	roundto(a,10);
	printf("Hello world %s\n","dude",4,2,2*3,((a*5)+3)/2);
	(*funcptr)(&a,a+5);
	return 5;
}
static int x = sizeof(int);
static int x = sizeof(int*);
static int x = sizeof(const int* const*);
static int x = sizeof(int[3]);
static int x = sizeof(int[3][3]);
static int x = sizeof(int*[3][3]);
static int x = sizeof(const int);
static int x[] = { 1 };
static int x[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
static int x[] = { a, b, c+d, e*f, g*h+i };
static int x[] = { a, b, { 1, 2, 3, 4 }, c, d };
static int x[] = { a, b, { 1, 2, 3, 4, { x*x, y*y, z*z } }, c, d };
static int d(int a) {
	return (long)(a);
}
static int d(char a,char b) {
	return (long)(int)(a+b);
}
enum test x;
enum test { A, B, C, D } x;
enum test { A=1, B, C=100, D=A*400, E=A+B+C+D } x;
enum { A, B, C, D } x;
struct test x,*y,**z;
struct test { } x;
struct test { int a; int b,c; float d[3]; int x:1,y:3,z:7; } x;
struct test { int a; struct another { int x,y,z; } one; } x;
struct { int a,b,c; int z; } x;
union test x;
union test { } x;
union test { int a; int b,c; float d[3]; int x:1,y:3,z:7; } x;
union { int a,b,c; int z; } x;
struct test { int x; union { struct { int x,y; } i; struct { float a,b; } f; } un; } t;
struct test {
	int a;
	int (*func1)(int a,int b);
} x;
enum test;
enum test {
	A,
	B,
	C,
	D,
	E
};
struct test;
struct test {
	int a;
	int (*funct1)(int a,int b);
};
union test {
	int a,b;
};
struct {
	int a,b;
};
union {
	int a,b;
};
static const char *x = "hello\xff";
static const char *x = "Hello really long string constant likely to cause reallocation as it parses it into memory blah blah blah blah blah blah\n";
struct test { int a, b, c; } x = { 1, 2, 3 };
struct test { int a[3], b[5], c[7]; } x = { {1,2,3}, {1,2,3,4,5}, {1,2,3,4,5,6,7} };
static int x[] = { 10, 20, [5] = 50, [50][5] = 500, [500][50][5] = 5000, 60, 70 };
struct test { int a, test, b; } x = { .a = 5, .b = 7*8, .test = ((23*5)/3)+2 };
struct test { int a, test, b; } x = { a: 5, b: 7*8, c: a*b };
static inline int d() { return 3; }
static constexpr inline int d() { return 4; }

#define X(x) static int d(int y) { return y*x; }
X(1);
X(2);

static int d(int x) {
	static const int s = 50;
	switch (x) {
		case 0:
			return 0;
		case 1 ... 3:
			return 1;
		case 4 ... 19:
			return 2;
		case 20 ... s:
			return 3;
		default:
			break;
	};

	return x;
}

static int x[] = { 2, 3, [5] = 4, [10 ... 19] = 5 };

struct tt2 {
	unsigned int	x:4;
	unsigned int	y:3;
	unsigned int	z:1;
	unsigned int	a:3;
	unsigned int	b:2;
};

/* This is our extension to the struct bitfield syntax that allows explicit bitfield length and starting bit.
   For consistency reasons, the syntax within the brackets are exactly the same as GCC's range syntax for case statements and designated init lists.
   The syntax is [LSB bit position ... MSB bit position]. [4 ... 7] for example declares a 4-bit field starting at bit 4 with the MSB at bit 7. */
struct tt3 {
	unsigned int	x:[0 ... 3];
	unsigned int	y:[4 ... 6];
	unsigned int	z:[7];
	unsigned int	a:[8 ... 10];
	unsigned int	b:[11 ... 12];
};

#define BF(x) [((x)*5) ... (((x)*5)+4)]

struct tt4 {
	unsigned int	x:BF(0);
	unsigned int	y:BF(1);
	unsigned int	z:BF(2);
	unsigned int	a:BF(3);
	unsigned int	b:BF(4);
};

